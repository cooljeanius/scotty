---
name: cooljeanius/scotty
on:
  push:
    branches:
      - "**/*"
  pull_request:
jobs:
  test:
    runs-on: ${{ matrix.os }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        # 'sudo' was not transformed because there is no suitable equivalent in
        # GitHub Actions
      - name: Dependencies 1
        run: |
          echo "Updating package lists..."
          if [[ "${{ runner.os }}" == "macOS" ]]; then \
            brew update; \
          elif [[ "${{ runner.os }}" == "Linux" ]]; then \
            sudo apt-get update; fi
      - name: Dependencies 2
        run: |
          echo "Installing dependencies..."
          # Be careful here: libtirpc is listed on Homebrew's package list, but
          # it's only available via Linuxbrew...
          if [[ "${{ runner.os }}" == "macOS" ]]; then \
            brew install autoconf pkg-config findutils tcl-tk rpcsvc-proto; \
          elif [[ "${{ runner.os }}" == "Linux" ]]; then \
            sudo apt-get install tcl libtcl-perl pkg-config findutils \
              libtirpc-common libtirpc-dev libntirpc-dev mingw-w64 wine wine64 \
              rpcsvc-proto libc-dev; \
          fi
      - name: Dependencies 3
        run: |
          if test -d /opt && test -r /opt; then ls /opt; fi
          if [[ "${{ runner.os }}" == "macOS" ]]; then \
            brew link --force --overwrite tcl-tk; \
          elif [[ "${{ runner.os }}" == "Linux" ]]; then \
            find . -name arpa/nameser.h; fi
      - name: Dependencies 4
        run: |
          sync && pwd
          if test -x /home/linuxbrew/.linuxbrew/bin/brew; then \
            eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"; \
            brew install --verbose tcl-tk libtirpc; \
          else \
            echo "Linuxbrew unavailable, so skipping attempting to use it to try to install anything"; \
          fi
      - run: cd tnm && autoreconf -vi -Wno-obsolete
      - name: Configure
        run: |
          cd tnm
          if [ -f /usr/lib/tclConfig.sh ]; then \
            ./configure --with-tcl=/usr/lib; \
          elif [ -f /usr/local/lib/tclConfig.sh ]; then \
            ./configure --with-tcl=/usr/local/lib; \
          elif [ -f /home/linuxbrew/.linuxbrew/lib/tclConfig.sh ]; then \
            ./configure --with-tcl=/home/linuxbrew/.linuxbrew/lib; \
          elif [ -f /usr/share/miniconda/lib/tclConfig.sh ]; then \
            touch miniconda_build.txt; \
            ./configure --with-tcl=/usr/share/miniconda/lib; \
          elif [ -f /opt/homebrew/lib/tclConfig.sh ]; then \
            ./configure --with-tcl=/opt/homebrew/lib; \
          else \
            echo "Unsure where to find tcl; this may fail" && ./configure; \
          fi
      - name: Build
        run: |
          cd tnm
          if [[ "${{ runner.os }}" == "Linux" ]]; then \
            if test -e miniconda_build.txt; then \
              stat compat; \
              make -ki CFLAGS="-Wno-error=implicit-function-declaration -Wno-attributes -Icompat -D__TNM_CONFIG_H__ -DINET_ADDRSTRLEN=16"; \
            else \
              make CFLAGS="-Wno-error=implicit-function-declaration -Wno-attributes -I/usr/include/tirpc -fPIC"; \
            fi; \
          else \
            make CFLAGS="-Wno-error=implicit-function-declaration -Wno-error=incompatible-function-pointer-types -Wno-attributes"; \
          fi
      - name: Install 1
        run: |
          cd tnm
          if [[ $(uname -s) == "Linux" ]]; then \
            if test -e miniconda_build.txt; then \
              sudo make -ki install; \
            else \
              sudo make install CFLAGS="-Wno-error"; \
            fi; \
          else \
            echo "Skipping first install step for '$(uname -s)'"; \
          fi
      - name: Install 2
        run: |
          cd tnm
          if [[ $(uname -s) == "Linux" ]]; then \
            sudo make sinstall; \
          else \
            echo "Skipping second install step for '$(uname -s)'"; \
          fi
      - name: Debug failure
        if: "${{ failure() }}"
        run: |
          ls -AR
          sleep 1
          if test -x "$(which clear)" -a -n "${TERM}" -a "${TERM}" != "dumb"; then \
            echo "clear is $(which clear) and TERM is ${TERM}" && clear; \
          else \
            echo "(end of file listing output)"; \
          fi
          echo "whoami? $(whoami)"
          sleep 1
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
